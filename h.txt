def update_surplus_worksheet(data):
    """
    To update surplus worksheet, add new row to List
    """
    print("Updating surplus worksheet...\n")
    surplus_worksheet = SHEET.worksheet("surplus")
    surplus_worksheet.append_row(data)
    print("Surplus Worksheet successfully updated.\n")


# def update_worksheet(data, worksheet):
#     """
#     update worksheet
#     """ 
#     print(f"Updating {worksheet} worksheet...")
#     worksheet_to_update = SHEET.worksheet(worksheet)
#     worksheet_to_update.append_row(data)
#     print(f"{worksheet} Worksheet updated successfully")


def calculate_surplus_data(sales_row): # To retrieve lastest stock order from Spreadsheet
    """
    Compare Sales with Stock and Calc Surplus for each item type
    Surplus is when Sales figure substract from stock
    -Positive surplus indicate Waste-
    -Negative Surplus indicate extra made after stock finished
    """

    print("Calculating Surplus data...\n")
    stock = SHEET.worksheet("stock").get_all_values()
    stock_row = stock[-1]
    print(stock_row)
    # print(f"Stock row:{stock_row}")
    # print(f"Sales row:{sales_row}")
   

    #To iterate through 2 list at a time
    # surplus_data =[]
    # for stock, sales in zip(stock_row, sales_row):
    #     surplus = int(stock) - sales
    #     surplus_data.append(surplus)

    # print(surplus_data)    

# def get_last_5_entries():
#     """
#     Collect column of data from sales worksheet, last 5 entries for 
#     each Sandwich and return data as list of lists
#     """    
#     sales = SHEET.worksheet("sales")
#     # column = sales.col_values(3)
#     # print(column)

#     columns = []
#     for ind in range(1, 7):
#         column = sales.col_values(ind)
#         columns.append(column[-5:]) #To get the last 5 entries
#     # pprint(columns)    
#     return columns

# def calculate_stock_data(data):
#     """
#     Calculate the average stock for each item type, adding 10%
#     """
#     print("Calculating stock data...\n")
#     new_stock_data=[]

#     for column in data:
#         int_column =[int(num) for num in column] # To convert list to INT
#         average = sum(int_column) / len(int_column) # To get the average
#         stock_num = average * 1.1 # to increase stock by 10%
#         new_stock_data.append(round(stock_num))

#     return new_stock_data


# We have to call the function for the CODE it to run..